{"version":3,"sources":["Login.js","App.js","serviceWorker.js","index.js"],"names":["layout","labelCol","span","wrapperCol","tailLayout","offset","formRef","React","createRef","onFinish","values","console","log","axios","get","data","then","response","className","ref","this","name","onFinishFailed","Item","label","rules","required","message","width","type","htmlType","onClick","onReset","onFill","Component","App","path","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"oUAMMA,G,OAAS,CACbC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,KAGJE,EAAa,CACjBD,WAAY,CACVE,OAAQ,GACRH,KAAM,K,8MAKRI,QAAUC,IAAMC,Y,EAEhBC,SAAW,SAACC,GACVC,QAAQC,IAAIF,GACZG,IAAMC,IAAI,mCAAmC,CAC3CC,KAAML,IACLM,MAAK,SAACC,GACPN,QAAQC,IAAIK,EAASF,U,uDAgBvB,OACE,yBAAKG,UAAU,mBACb,yBAAKA,UAAU,iBACb,kBAAC,IAAD,iBAAUlB,EAAV,CAAkBmB,IAAKC,KAAKd,QAASe,KAAK,cAAcZ,SAAUW,KAAKX,SAAUa,eAAgBF,KAAKE,iBACpG,kBAAC,IAAKC,KAAN,CACEF,KAAK,WACLG,MAAM,qBACNC,MAAO,CACL,CACEC,UAAU,EAAMC,QAAS,0CAI7B,kBAAC,IAAD,CAAOC,MAAS,MAElB,kBAAC,IAAKL,KAAN,CACEF,KAAK,WACLG,MAAM,eACNC,MAAO,CACL,CACEC,UAAU,EAAMC,QAAS,oCAI7B,kBAAC,IAAD,OAEF,kBAAC,IAAKJ,KAASnB,EACb,kBAAC,IAAD,CAAQyB,KAAK,UAAUC,SAAS,UAAhC,gBAGA,kBAAC,IAAD,CAAQA,SAAS,SAASC,QAASX,KAAKY,SAAxC,gBAGA,kBAAC,IAAD,CAAQH,KAAK,OAAOC,SAAS,SAASC,QAASX,KAAKa,QAApD,oC,GAzDeC,aCHdC,MAbf,WACE,OACE,kBAAC,IAAD,KACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,KACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAUC,GAAG,SCAHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAM3B,a","file":"static/js/main.9e5be671.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport { message, Form, Input, Button} from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport './index.css'\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n  },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 10,\r\n    span: 16,\r\n  },\r\n};\r\n\r\nexport default class extends Component{\r\n  formRef = React.createRef();\r\n  \r\n  onFinish = (values) => {\r\n    console.log(values)\r\n    axios.get(\"http://localhost:4040/users/test\",{\r\n      data: values\r\n    }).then((response)=>{\r\n      console.log(response.data)\r\n    })/*\r\n    const url = \"http://localhost:4040/users/login\"\r\n    axios.get(url,{\r\n      data: values\r\n    }).then((response)=>{\r\n      console.message(response.data)\r\n      if (response.data.msg === 'success'){\r\n        message.success('Login Succed!')\r\n      }else{\r\n        message.warn('Login Failed')\r\n      }\r\n    })*/\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className='main__container'>\r\n        <div className='main__content'>\r\n          <Form {...layout} ref={this.formRef} name=\"control-ref\" onFinish={this.onFinish} onFinishFailed={this.onFinishFailed} >\r\n            <Form.Item\r\n              name=\"username\"\r\n              label=\"用户名\"\r\n              rules={[\r\n                {\r\n                  required: true, message: '请输入用户名',\r\n                },\r\n              ]}\r\n            >\r\n              <Input width = {15}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"password\"\r\n              label=\"密码\"\r\n              rules={[\r\n                {\r\n                  required: true, message: '请输入密码',\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item {...tailLayout}>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                登录\r\n              </Button>\r\n              <Button htmlType=\"button\" onClick={this.onReset}>\r\n                注册\r\n              </Button>\r\n              <Button type=\"link\" htmlType=\"button\" onClick={this.onFill}>\r\n                忘记密码\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport './App.css';\nimport { Route, BrowserRouter as Router, Switch, Redirect } from 'react-router-dom';\nimport Login from './Login'\n\nfunction App() {\n  return (\n    <Router>\n        <Switch>\n          <Route path='/'>\n            <Login />\n          </Route>\n          <Redirect to='/' />\n        </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}